@page "/formulario"
@using EjemploModelado.Web.Domain.Builder
@using EjemploModelado.Web.Domain.Services
@using EjemploModelado.Web.Domain.ServiceModel
@using Microsoft.AspNetCore.Components.Forms

@rendermode InteractiveServer

<PageTitle>Formulario</PageTitle>

<h3>Llene el siguiente formulario para estimar su presupuesto.</h3>
<div class="container">
    <EditForm Model="@configuracion" OnSubmit="@OnSubmit" FormName="Configuracion">
        <div class="container">
            <div class="form-group">
                <label for="configuracion.MemoriaRam" class="form-label">Memoria Ram:</label>
                <InputNumber @bind-Value="configuracion!.MemoriaRam" class="form-input" />
            </div>

            <div class="form-group">
                <label for="configuracion.Almacenamiento" class="form-label">Almacenamiento:</label>
                <InputNumber @bind-Value="configuracion!.Almacenamiento"  class="form-input" />
            </div>

            <div class="form-group">
                <label for="configuracion.NucleosProcesador" class="form-label">Núcleos del Procesador:</label>
                <InputNumber @bind-Value="configuracion!.NucleosProcesador" class="form-input" />
            </div>

            <div class="form-group">
                <label for="configuracion.PuertosUSB" class="form-label">Número de puertos USB:</label>
                <InputNumber @bind-Value="configuracion!.PuertosUsb" class="form-input" />
            </div>

        </div>

        <button class="custom-button">Crear</button>
    </EditForm>
</div>

@code {
    Computadora configuracion { get; set; } = new Computadora();

    
    List<Componente> componentes = new List<Componente>();

    private async Task<bool> OnSubmit()
    {
        Console.WriteLine($"MemoriaRam: {configuracion.MemoriaRam}");
        Console.WriteLine($"Almacenamiento: {configuracion.Almacenamiento}");
        Console.WriteLine($"NucleosProcesador: {configuracion.NucleosProcesador}");
        Console.WriteLine($"PuertosUsb: {configuracion.PuertosUsb}");


        ComputadoraModel computadoraModel = new ComputadoraModel
            {
                MemoriaRam = configuracion.MemoriaRam,
                Almacenamiento = configuracion.Almacenamiento,
                NucleosProcesador = configuracion.NucleosProcesador,
                PuertosUsb = configuracion.PuertosUsb,
                ComponentesIds = new List<int> { 1, 3, 5 }
            };

        return await ApiServiceComputadora.Singleton().PostComputadora(computadoraModel);
    }

    protected override async Task OnInitializedAsync()
    {
        Console.Write("Inicio");
        componentes = await ApiServiceComponente.Singleton().GetComponentes();
        foreach (var componente in componentes)
        {
            Console.WriteLine("ID: " + componente.Id + " | Descripcion: " + componente.Descripcion);
        }

    }
}